" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.bundles file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file imports the various plugins of vimde. If you
"   wish to alter which groups are imported, see vimrc.before.
"   If you wish to add or remove individual bundles, create
"   ~/.vimrc.bundles.local and `Bundle` or `UnBundle` as needed
"   from there.
"
"   You can find me at http://vimde.com
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }


" }

" Setup Plugin Manager Support {
        " The next three lines ensure that the ~/.vim/bundle/ system works
        " filetype off
        " set rtp+=~/.vim/bundle/vundle
        " call vundle#rc()
        set rtp+=~/.vim/bundle/vim-plug
        call plug#begin('~/.vim/bundle')
    " }

    " Add an UnBundle command {
    " function! UnBundle(arg, ...)
      " let bundle = vundle#config#init_bundle(a:arg, a:000)
      " call filter(g:vundle#bundles, 'v:val["name_spec"] != "' . a:arg . '"')
    " endfunction

    " com! -nargs=+         UnBundle
    " \ call UnBundle(<args>)
    " }
" }

" Plugins {

    " Deps {
        " Bundle 'gmarik/vundle'
        Plug 'junegunn/vim-plug'
    " }

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:vimde_bundle_groups')
        let g:vimde_bundle_groups=['general', 'writing', 'neocomplete', 'programming', 'php', 'ruby', 'python', 'javascript', 'html', 'misc',]
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_vimde_bundles = 1
    if !exists("g:override_vimde_bundles")

    " Python provider for neovim {
        " to make vim load faster without detecting providers
        "let g:python_host_skip_check  = 1
        "let g:python_host3_skip_check = 1
        let g:python_host_prog        = 'python' " using pyenv as version manager
        let g:python3_host_prog       = 'python' " using pyenv as version manager
    " }

    " General {
        if count(g:vimde_bundle_groups, 'general')
            " NERD tree will be loaded on the first invocation of NERDTreeToggle command
            Plug 'scrooloose/nerdtree' ", { 'on':  'NERDTreeToggle' }
            Plug 'jistr/vim-nerdtree-tabs'
            "Plug 'Xuyuanp/nerdtree-git-plugin' " too slow for large git
            "repositories
            "Plug 'ctrlpvim/ctrlp.vim'
            "Plug 'tacahiroy/ctrlp-funky'
            Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " A command-line fuzzy finder
            Plug 'junegunn/fzf.vim'
            Plug 'eugen0329/vim-esearch' "Project-wide/global search and edit
            "Plug 'google/vim-searchindex' "vim-searchindex: display number of search matches & index of a current match
            Plug 'lfv89/vim-interestingwords' " A vim plugin for highlighting and navigating through different words in a buffer.
            "Plug 'itchyny/vim-cursorword' " Underlines the word under the cursor
            "Plug 'dyng/ctrlsf.vim' " project-wide/global search, similar to ctrl-shift-f in sublime
            if executable('ag')
                Plug 'mileszs/ack.vim'
                let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
            elseif executable('ack-grep')
                let g:ackprg="ack-grep -H --nocolor --nogroup --column"
                Plug 'mileszs/ack.vim'
            elseif executable('ack')
                Plug 'mileszs/ack.vim'
            endif
            Plug 'terryma/vim-multiple-cursors'
            Plug 'jiangmiao/auto-pairs'
            Plug 'mbbill/undotree'
            Plug 'easymotion/vim-easymotion'
            "Plug 'matchit.zip'
            "Plug 'ryanoasis/vim-devicons', { 'do': '' }
            Plug 'tpope/vim-surround'
            Plug 'tpope/vim-repeat'
            Plug 'rhysd/conflict-marker.vim'
            "Plug 'Raimondi/delimitMate'
            "Plug 'vim-scripts/sessionman.vim'
            Plug 'tpope/vim-obsession'
            Plug 'Shougo/vimproc.vim', {'do': 'make'}
            if (has("python") || has("python3")) && exists('g:vimde_use_powerline') && !exists('g:vimde_use_old_powerline')
                Plug 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
            elseif exists('g:vimde_use_powerline') && exists('g:vimde_use_old_powerline')
                Plug 'Lokaltog/vim-powerline'
            else
                Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
                " Plug 'itchyny/lightline.vim'
            endif
            Plug 'powerline/fonts'
            "Plug 'bling/vim-bufferline'
            if !exists('g:vimde_no_views')
                Plug 'vim-scripts/restore_view.vim'
            endif
            Plug 'tpope/vim-abolish' "abolish.vim: easily search for, substitute, and abbreviate multiple variants of a word 
            " Plugin to move lines and selections up and down
            Plug 'matze/vim-move'
            Plug 'osyo-manga/vim-over'
            Plug 'gcmt/wildfire.vim'
            Plug 'mhinz/vim-startify'
            "Plug 'MattesGroeger/vim-bookmarks'
            Plug 'tpope/vim-characterize' " extend 'ga'
            "Plug 'cazador481/fakeclip.neovim'
            Plug 'MarcWeber/vim-addon-mw-utils'
            Plug 'tomtom/tlib_vim'

        endif
    " }

    " General Programming {
        if count(g:vimde_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            "Plug 'scrooloose/syntastic', { 'for': [] }
            
            Plug 'sheerun/vim-polyglot' "A solid language pack for Vim. XXX: too slow moving in normal mode, don't use
            Plug 'tpope/vim-fugitive' " 
            Plug 'mhinz/vim-signify'
            Plug 'mattn/gist-vim'
            Plug 'scrooloose/nerdcommenter'
            Plug 'tpope/vim-commentary'
            "Plug 'godlygeek/tabular'
            Plug 'junegunn/vim-easy-align'
            "Plug 'benekastah/neomake', { 'do': 'pip install pylint && npm install -g eslint babel-eslint eslint-plugin-react', 'for': ['python', 'javascript'] }
            " Plug 'w0rp/ale' " Asynchronous Lint Engine
            Plug 'Chiel92/vim-autoformat', { 'do': 'npm install -g esformatter esformatter-jsx' }
            " Plug 'nathanaelkane/vim-indent-guides' " DEPRECATED
            Plug 'Yggdroot/indentLine'
            " Plug 'lukas-reineke/indent-blankline.nvim'
            Plug 'luochen1990/rainbow'
            Plug 'kien/rainbow_parentheses.vim'
            Plug 'thinca/vim-quickrun'
            Plug 'thinca/vim-qfreplace'  " perform the replacement in quickfix
            if executable('ctags')
                Plug 'majutsushi/tagbar'
            endif
            Plug 'janko-m/vim-test'
            " CVS/SVN/SVK/git/hk/bzr integration
            "Plug 'vim-scripts/vcscommand.vim'
            Plug 'qstrahl/vim-matchmaker'
            " a solid language pack for vim
            "for javascript with tagbar, { 'do': 'npm install -g git+https://github.com/ramitos/jsctags.git' }
            " Plug 'tpope/vim-sleuth', {'for': ['c', 'cpp', 'obj', 'go', 'cs', 'html', 'javascript', 'python']}                 " automatically detect and set buffer indentation options
            Plug 'mattn/webapi-vim'
            "Plug 'PeterRincker/vim-argumentative'
            Plug 'AndrewRadev/sideways.vim' "move function arguments (and other delimited-by-something items) left and right
            "Plug 'zenbro/mirror.vim'
            "Plug 'editorconfig/editorconfig-vim'
            "Plug 'tpope/vim-endwise' " endwise.vim: wisely add 'end' in ruby, endfunction/endif/more in vim script, etc
        endif
    " }

    " Snippets & AutoComplete {

        if count(g:vimde_bundle_groups, 'coc.nvim')
            " Use release branch (recommend)
            Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': 'npm install -g yarn'}
            Plug 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build'  }
        endif

        if count(g:vimde_bundle_groups, 'youcompleteme')
            function! BuildYCM(info)
              " info is a dictionary with 3 fields
              " - name:   name of the plugin
              " - status: 'installed', 'updated', or 'unchanged'
              " - force:  set on PlugInstall! or PlugUpdate!
              if a:info.status == 'installed' || a:info.force
                  " Mac 
                  " TODO: Ubuntu
                !./install.py --clang-completer --gocode-completer --rust-completer --js-completer --java-completer
              endif
            endfunction
            " FIXME: too slow loading python3.vim provider
            Plug 'Valloric/YouCompleteMe',
                    \ { 
                        \ 'do': function('BuildYCM'),
                    \ }
                    \ 'for': ['c', 'cpp', 'python', 'rust', 'go', 'objc', 'objcpp', 'javascript', 'sh', 'thrift'],
            " XXX: For Golang auto complete to work, remember to set GOPATH
            " environment variable to your project package location before
            " opening go projects.

            " Using a non-master branch
            Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

            " Group dependencies, vim-snippets depends on ultisnips
            Plug 'SirVer/ultisnips' |  Plug 'honza/vim-snippets'
        elseif count(g:vimde_bundle_groups, 'snipmate')
            Plug 'garbas/vim-snipmate'
            Plug 'honza/vim-snippets'
            " Source support_function.vim to support vim-snippets.
            if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
                source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
            endif
        elseif count(g:vimde_bundle_groups, 'neocomplcache')
            Plug 'Shougo/neocomplcache'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'honza/vim-snippets'
        elseif count(g:vimde_bundle_groups, 'neocomplete')
            Plug 'Shougo/neocomplete.vim.git'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'honza/vim-snippets'
        endif

        function! DoRemote(arg)
          UpdateRemotePlugins
        endfunction

        function! BuildRacer(info)
          " info is a dictionary with 3 fields
          " - name:   name of the plugin
          " - status: 'installed', 'updated', or 'unchanged'
          " - force:  set on PlugInstall! or PlugUpdate!
          if a:info.status == 'installed'
            "!git clone https://github.com/rust-lang/rust.git ${HOME}/.rust/src
            "!echo "export RUST_SRC_PATH=${HOME}/.rust/src/src" >> ~/.zshrc
            "!echo "export RUST_SRC_PATH=${HOME}/.rust/src/src" >> ~/.bashrc
          elseif a:info.force
            !cd ${HOME}/.rust/src && git pull
          endif
          !cargo install racer
        endfunction

        if count(g:vimde_bundle_groups, 'deoplete')
            Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
            " use ultisnips snippet engine
            Plug 'SirVer/ultisnips' |  Plug 'honza/vim-snippets'
            Plug 'zchee/deoplete-jedi', { 'for': 'python', 'do': '' }
            Plug 'sebastianmarkow/deoplete-rust', { 'for': 'rust', 'do': function('BuildRacer') }
            Plug 'zchee/deoplete-clang', { 'for': ['c', 'cpp', 'objc', 'objcpp'] }
            Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'jsx', 'javascript.jsx', 'html'], 'do': 'npm install' }
            Plug 'zchee/deoplete-go',{ 'for': ['go'], 'do': 'go get -u github.com/nsf/gocode && make' }
            Plug 'pbogut/deoplete-padawan', { 'for': ['php'] }
            Plug 'landaire/deoplete-swift', { 'for': ['swift'] }
            Plug 'Shougo/neco-vim', { 'for': ['vim'] }
            Plug 'Shougo/neoinclude.vim'
            Plug 'Shougo/neco-syntax', { 'for': ['vim'] }
        endif

        " Plug 'tenfyzhong/CompleteParameter.vim' " Complete parameter after select the completion. Integration with YouCompleteMe(ycm), deoplete, neocomplete.
    " }

    " colorscheme {
        if count(g:vimde_bundle_groups, 'colorscheme')
            Plug 'flazz/vim-colorschemes'
            Plug 'iCyMind/NeoSolarized'
            Plug 'sickill/vim-monokai'

            " color schemes below are either included by 'flazz/vim-colorschemes', or
            " ugly...
            "Plug 'morhetz/gruvbox'
            "Plug 'joshdick/onedark.vim'
            "Plug 'tomasr/molokai'
            "Plug 'mhartington/oceanic-next'
            "Plug 'romainl/flattened'
            "Plug 'freeo/vim-kalisi'
            "Plug 'altercation/vim-colors-solarized'
            "Plug 'w0ng/vim-hybrid'
            "Plug 'chriskempson/vim-tomorrow-theme'
            "Plug 'frankier/neovim-colors-solarized-truecolor-only'
            "Plug 'raphamorim/lucario'
        endif
    " }

    " Writing {
        if count(g:vimde_bundle_groups, 'writing')
            Plug 'reedes/vim-litecorrect'
            Plug 'kana/vim-textobj-user'
            Plug 'kana/vim-textobj-indent'
            Plug 'reedes/vim-textobj-sentence'
            Plug 'reedes/vim-textobj-quote'
            Plug 'reedes/vim-wordy'
        endif
        Plug 'junegunn/goyo.vim' " distraction-free writing in Vim
    " }
    
    " Pandoc {
        if count(g:vimde_bundle_groups, 'pandoc')
            Plug 'vim-pandoc/vim-pandoc-syntax'
        endif
    " }

    " C, CPP, objc, objcpp {
        if !count(g:vimde_bundle_groups, 'youcompleteme') && !count(g:vimde_bundle_groups, 'deoplete')

            " Plug 'Rip-Rip/clang_complete',{ 'for': ['c', 'cpp', 'objc', 'objcpp'], 'do': '' } |
                        " \ " we don't need this plugin to complete header file anymore
                         " \ Plug 'xaizek/vim-inccomplete', { 'for': [] }
        endif
        Plug 'critiqjo/lldb.nvim', { 'for': ['c', 'cpp', 'rust', 'go', 'objc', 'objcpp', 'swift'] }
    " }
    
    " Objective-c {
        Plug 'b4winckler/vim-objc', { 'for': ['objc', 'objcpp', 'swift'] }
        Plug 'eraserhd/vim-ios', { 'for': ['objc', 'objcpp', 'swift'] }
        Plug 'gfontenot/vim-xcode', { 'for': ['objc', 'objcpp', 'swift'] }
        " method list, documentation
        " Plug 'msanders/cocoa.vim', { 'for': ['objc', 'objcpp'] }
    " }
    
    " swift {
        Plug 'keith/swift.vim', { 'for': ['swift'] }
        Plug 'toyamarinyon/vim-swift', {'for': ['swift']}
    " }

    " PHP {
        if count(g:vimde_bundle_groups, 'php')
            Plug 'arnaud-lb/vim-php-namespace', { 'for': ['php'] }
            Plug 'beyondwords/vim-twig', { 'for': ['php'] }
        endif
    " }

    " Python {
        " Pick either python-mode or pyflakes & pydoc
        Plug 'yssource/python.vim', { 'for': ['python'] }
        "Plug 'python_match.vim', { 'for': ['python'] }
        "Plug 'pythoncomplete', { 'for': ['python'] }
        if !count(g:vimde_bundle_groups, 'youcompleteme') && !count(g:vimde_bundle_groups, 'coc.nvim')
            Plug 'davidhalter/jedi-vim', { 'for': 'python' }
        endif
        "Plug 'klen/python-mode', { 'for': ['python'] }
        Plug 'hynek/vim-python-pep8-indent', {'for': ['python']}
        Plug 'bfredl/nvim-ipy', {'for': ['python', 'r']}
        Plug 'hdima/python-syntax', {'for': ['python']}
    " }

    " R {
        if count(g:vimde_bundle_groups, 'R')
            Plug 'jalvesaq/Nvim-R', { 'for': ['r'] }
            "Plug 'vim-scripts/Vim-R-plugin', { 'for': ['r'] }
        endif
    " }

    " Javascript {
        if count(g:vimde_bundle_groups, 'javascript')
            Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'jsx', 'javascript.jsx', 'html'] }
            Plug 'jelera/vim-javascript-syntax', { 'for': ['javascript', 'jsx', 'javascript.jsx', 'html'] }
            Plug 'othree/yajs.vim', { 'for': ['javascript', 'jsx', 'javascript.jsx', 'html'] }
            Plug 'mxw/vim-jsx', { 'for': ['javascript', 'jsx', 'javascript.jsx'], 'do': 'rm ~/.vim/bundle/vim-jsx/after/indent/jsx.vim' }
            "Plug 'marijnh/tern_for_vim', { 'for': ['javascript', 'jsx', 'javascript.jsx', 'html'], 'do': 'npm install && npm install -g tern' }
            Plug 'moll/vim-node', { 'for': ['javascript'] }
            Plug 'justinj/vim-react-snippets', { 'for': ['javascript'] }
            Plug 'groenewege/vim-less', { 'for': ['javascript'] }
            Plug 'briancollins/vim-jst', { 'for': ['javascript'] }
            Plug 'kchmck/vim-coffee-script', { 'for': ['javascript'] }
            Plug 'isRuslan/vim-es6', { 'for': ['javascript'] }
            "Plug 'othree/jspc.vim', { 'for': ['javascript'] }
            "Plug 'heavenshell/vim-jsdoc', { 'for': ['javascript'] }
        endif
    " }

    " typescript {
        if count(g:vimde_bundle_groups, 'deoplete') 
            Plug 'mhartington/deoplete-typescript', { 'for': ['typescript'], 'do': 'npm install -g typescript' }
        endif
    " }

    " Scala {
        if count(g:vimde_bundle_groups, 'scala')
            Plug 'derekwyatt/vim-scala', { 'for': ['scala'] }
            Plug 'derekwyatt/vim-sbt', { 'for': ['scala'] }
            "Plug 'xptemplate', { 'for': ['scala'] }
        endif
    " }

    " Haskell {
        if count(g:vimde_bundle_groups, 'haskell')
            Plug 'travitch/hasksyn', { 'for': ['haskell'] }
            Plug 'dag/vim2hs', { 'for': ['haskell'] }
            Plug 'Twinside/vim-haskellConceal', { 'for': ['haskell'] }
            Plug 'Twinside/vim-haskellFold', { 'for': ['haskell'] }
            Plug 'lukerandall/haskellmode-vim', { 'for': ['haskell'] }
            Plug 'eagletmt/neco-ghc', { 'for': ['haskell'] }
            Plug 'eagletmt/ghcmod-vim', { 'for': ['haskell'] }
            Plug 'adinapoli/cumino', { 'for': ['haskell'] }
            Plug 'bitc/vim-hdevtools', { 'for': ['haskell'] }
            Plug 'neovimhaskell/haskell-vim', { 'for': ['haskell'] }
        endif
    " }

    " HTML {
        if count(g:vimde_bundle_groups, 'html')
            Plug 'vim-scripts/HTML-AutoCloseTag', { 'for': ['css', 'html', 'javascript', 'xml']}
            Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'html', 'javascript']}
            Plug 'ap/vim-css-color' ", { 'for': ['css', 'scss', 'javascript'] }
            Plug 'tpope/vim-haml', { 'for': ['haml', 'sass', 'scss'] }
            Plug 'mattn/emmet-vim', { 'for': ['css', 'scss', 'javascript'] }
        endif
        Plug 'mattn/emmet-vim', {'for': ['html','javascript', 'css', 'jsx', 'javascript.jsx' ]}
    " }

    " Ruby {
        if count(g:vimde_bundle_groups, 'ruby')
            Plug 'tpope/vim-rails', { 'for': ['ruby'] }
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif
    " }

    " Puppet {
        if count(g:vimde_bundle_groups, 'puppet')
            Plug 'rodjek/vim-puppet'
        endif
    " }

    " Go Lang {
        if count(g:vimde_bundle_groups, 'go')
            "Plug 'Blackrush/vim-gocode', { 'for': ['go'], 'do': 'go get github.com/nsf/gocode' }
            "Plug 'fatih/vim-go', { 'for': ['go'], 'do': ':GoInstallBinaries'}
        endif
    " }

    " Elixir {
        if count(g:vimde_bundle_groups, 'elixir')
            Plug 'elixir-lang/vim-elixir', { 'for': ['elixir'] }
            Plug 'carlosgaldino/elixir-snippets', { 'for': ['elixir'] }
            Plug 'mattreduce/vim-mix', { 'for': ['elixir'] }
            Plug 'archSeer/elixir.nvim', { 'for': ['elixir'] }
        endif
    " }

    " Misc {
        if count(g:vimde_bundle_groups, 'misc')
            "Plug 'plasticboy/vim-markdown', { 'for': ['markdown'] }
            Plug 'tpope/vim-cucumber'
            Plug 'cespare/vim-toml', { 'for': ['toml'] }
            Plug 'quentindecock/vim-cucumber-align-pipes'
            Plug 'saltstack/salt-vim'
            Plug 'chrisbra/csv.vim', { 'for': ['csv'] }

            function! BuildComposer(info)
              if a:info.status != 'unchanged' || a:info.force
                !cargo build --release
                UpdateRemotePlugins
              endif
            endfunction

        endif
    " }

    " markdown {
        " If you don't have nodejs and yarn
        " use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
        " see: https://github.com/iamcco/markdown-preview.nvim/issues/50
        " Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

        " If you have nodejs and yarn
        Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install', 'for': ['markdown']  }

        "Plug 'euclio/vim-markdown-composer', { 'do': function('BuildComposer') }
        " FIXME: plugin not working
        "Plug 'suan/vim-instant-markdown', {'for': ['markdown'], 'do': 'npm install -g instant-markdown-d'}
        "autocmd Filetype markdown set shell=bash\ -i

    " }

    " Rust {
        Plug 'rust-lang/rust.vim', { 'for': ['rust']}
        "Plug 'ebfe/vim-racer',
                    "\ {
                        "\ 'for': ['rust'],
                        "\ 'do': function('BuildRacer'),
                    "\ }
    " }

    " github {
        if count(g:vimde_bundle_groups, 'github')
            " Using git URL
            Plug 'https://github.com/junegunn/vim-github-dashboard.git'
        endif
    " }

    " SQL {
        Plug 'vim-scripts/SQLUtilities', { 'for': ['sql'] }
        Plug 'vim-scripts/SQLComplete.vim', { 'for': ['sql']}
        Plug 'vim-scripts/dbext.vim', { 'for': ['sql']}
    " }

    " lua {
        Plug 'xolox/vim-misc' | Plug 'xolox/vim-lua-ftplugin', {'for':['lua']}
    " }

    " java {
        Plug 'artur-shaik/vim-javacomplete2', { 'for': ['java'] }
    " }

    " json {
        Plug 'elzr/vim-json', { 'for': ['json'] }
    " }

    " LaTex {
        Plug 'lervag/vimtex', {'for': ['tex']}
        Plug 'donRaphaco/neotex', { 'for': 'tex' } "latex live preview - plugin for neovim and vim 8
    " }

    endif
" }

" Setup Plugin Manager Support end {
    " Setup vim-plug Support {
        " The next line ensures that the ~/.vim/bundle/ system works
        call plug#end()
    " }
" }

" Use fork bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.fork"))
        source ~/.vimrc.bundles.fork
    endif
" }

" Use local bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.local"))
        source ~/.vimrc.bundles.local
    endif
" }
