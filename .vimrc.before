" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.before file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file is for options which must be set *before* plugins
"   are loaded and the main .vimrc config is run. Most of these
"   are for preventing mappings or commands from being created.
"
"   You can find me at http://vimde.com
" }

" vimde options {

    " Prevent automatically changing to open file directory
    "   let g:vimde_no_autochdir = 1

    " Disable views
    "   let g:vimde_no_views = 1

    " Leader keys
    "   let g:vimde_leader='\'
    "   let g:vimde_localleader='_'

    " Disable easier moving in tabs and windows
    "   let g:vimde_no_easyWindows = 1

    " Disable wrap relative motion for start/end line motions
    "   let g:vimde_no_wrapRelMotion = 1

    " Disable fast tab navigation
    "   let g:vimde_no_fastTabs = 1

    " Clear search highlighting
    "   let g:vimde_clear_search_highlight = 1

    " Disable neosnippet expansion
    " This maps over <C-k> and does some Supertab
    " emulation with snippets
    "   let g:vimde_no_neosnippet_expand = 1

    " Disable whitespace stripping
    "   let g:vimde_keep_trailing_whitespace = 1

    " Enable powerline symbols
    "   let g:airline_powerline_fonts = 1

    " vim files directory
    "   let g:vimde_consolidated_directory = <full path to desired directory>
    "   eg: let g:vimde_consolidated_directory = $HOME . '/.vim/'

    " This makes the completion popup strictly passive.
    " Keypresses acts normally. <ESC> takes you of insert mode, words don't
    " automatically complete, pressing <CR> inserts a newline, etc. Iff the
    " menu is open, tab will cycle through it. If a snippet is selected, <C-k>
    " expands it and jumps between fields.
    "   let g:vimde_noninvasive_completion = 1

    " Don't turn conceallevel or concealcursor
    "   let g:vimde_no_conceal = 1

    " For some colorschemes, autocolor will not work (eg: 'desert', 'ir_black')
    " Indent guides will attempt to set your colors smartly. If you
    " want to control them yourself, do it here.
    "   let g:indent_guides_auto_colors = 0
    "   autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#212121 ctermbg=233
    "   autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#404040 ctermbg=234

    " Leave the default font and size in GVim
    " To set your own font, do it from ~/.vimrc.local
    "   let g:vimde_no_big_font = 1

    " Disable  omni complete
    "   let g:vimde_no_omni_complete = 1

    " Don't create default mappings for multicursors
    " See :help multiple-cursors-mappings
    "   let g:multi_cursor_use_default_mapping=0
    "   let g:multi_cursor_next_key='<C-n>'
    "   let g:multi_cursor_prev_key='<C-p>'
    "   let g:multi_cursor_skip_key='<C-x>'
    "   let g:multi_cursor_quit_key='<Esc>'
    " Require a special keypress to enter multiple cursors mode
    "   let g:multi_cursor_start_key='+'

    " Mappings for editing/applying vimde config
    "   let g:vimde_edit_config_mapping='<leader>ev'
    "   let g:vimde_apply_config_mapping='<leader>sv'
    
" }

" Use fork before if available {
    if filereadable(expand("~/.vimrc.before.fork"))
        source ~/.vimrc.before.fork
    endif
" }

" Use local before if available {
    if filereadable(expand("~/.vimrc.before.local"))
        source ~/.vimrc.before.local
    endif
" }

" Disable views
let g:vimde_no_views = 1

" don't automatically change to current directory
let g:vimde_no_autochdir = 1

            " \ 'youcompleteme',
" Use 'coc.nvim' or 'youcompleteme' as auto-completion engine
let g:vimde_bundle_groups=[
            \ 'general',
            \ 'colorscheme',
            \ 'programming',
            \ 'coc.nvim',
            \ 'telescope.nvim',
            \ 'autocomplete',
            \ 'writting',
            \ 'python',
            \ 'javascript',
            \ 'go',
            \ 'php',
            \ 'ruby',
            \ 'html',
            \ 'misc',
            \ 'scala',
            \ 'R',
            \ 'java',
            \ 'github',
            \ ]

" omni autocomplete {
    if !exists('g:vimde_no_omni_complete')
        aug omnicomplete
            autocmd!
            autocmd FileType c setlocal omnifunc=ccomplete#Complete
            autocmd FileType cpp setlocal omnifunc=ccomplete#Complete
            autocmd FileType objc,objcpp setlocal omnifunc=ccomplete#Complete
            autocmd FileType clojure setlocal omnifunc=clojurecomplete#Complete
            autocmd FileType css,sass,scss,stylus,less setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType go setlocal omnifunc=gocomplete#Complete
            autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            autocmd FileType html,htmldjango,jinja,markdown setlocal omnifunc=emmet#completeTag
            autocmd FileType javascript,jsx,javascript.jsx setlocal omnifunc=javascriptcomplete#CompleteJS
            " python2 complete,defined in runtime/autoload/pythoncomplete.vim
            autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
            " python3 complete, defined in runtime/autoload/python3complete.vim
            autocmd FileType python setlocal omnifunc=python3complete#Complete
            autocmd FileType r setlocal omnifunc=rubycomplete#Complete
            autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
            autocmd FileType sql setlocal omnifunc=sqlcomplete#Complete
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        aug END
    endif
" }

" let g:powerline_pycmd="python3"
" let g:vimde_use_powerline=1

"vim-coloresque
if !exists("b:color_pattern")
    let b:color_pattern = {}
endif

" neovim python support
"let g:python_host_prog = 'python2' # auto detected
"let g:python3_host_prog = 'python3' # auto detected

" vim-autoformat settings
"let g:formatters_javascript = ['esformatter', 'jsbeautify_javascript', 'pyjsbeautify_javascript', 'jscs']
let g:formatters_javascript = ['esformatter']
let g:formatdef_esformatter = '"/usr/local/bin/esformatter -c ~/.esformatter"'

"let g:formatdef_autopep8 = '"autopep8 - --aggressive --aggressive ".(&textwidth ? "--max-line-length=".&textwidth : "")'
let g:formatdef_autopep8 = '"autopep8 - --aggressive --ignore E302".(&textwidth ? "--max-line-length=".&textwidth : "")'

"markdown
" XXX: don't use interactive shell, suspended tty input bug!!!
"au FileType markdown setl shell=bash\ -i

" disable <F1> help.txt
map <F1> <Esc>
imap <F1> <Esc>

"fileformat
set fileformat=unix

" fix https://github.com/neovim/neovim/issues/2048
if has('nvim')
    nmap <BS> <C-W>h
endif
