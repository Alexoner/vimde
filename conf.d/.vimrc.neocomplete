" neocomplete {
	if count(g:vimde_bundle_groups, 'neocomplete')
		let g:acp_enableAtStartup = 0
		let g:neocomplete#enable_at_startup = 1
		let g:neocomplete#enable_smart_case = 1
		let g:neocomplete#enable_auto_delimiter = 1
		let g:neocomplete#max_list = 15
		let g:neocomplete#force_overwrite_completefunc = 1


		" Define dictionary.
		let g:neocomplete#sources#dictionary#dictionaries = {
					\ 'default' : '',
					\ 'vimshell' : $HOME.'/.vimshell_hist',
					\ 'scheme' : $HOME.'/.gosh_completions'
					\ }

		" Define keyword.
		if !exists('g:neocomplete#keyword_patterns')
			let g:neocomplete#keyword_patterns = {}
		endif
		let g:neocomplete#keyword_patterns['default'] = '\h\w*'

		" Plugin key-mappings {
			" These two lines conflict with the default digraph mapping of <C-K>
			if !exists('g:vimde_no_neosnippet_expand')
				imap <C-k> <Plug>(neosnippet_expand_or_jump)
				smap <C-k> <Plug>(neosnippet_expand_or_jump)
			endif
			if exists('g:vimde_noninvasive_completion')
				inoremap <CR> <CR>
				" <ESC> takes you out of insert mode
				inoremap <expr> <Esc>   pumvisible() ? "\<C-y>\<Esc>" : "\<Esc>"
				" <CR> accepts first, then sends the <CR>
				inoremap <expr> <CR>    pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
				" <Down> and <Up> cycle like <Tab> and <S-Tab>
				inoremap <expr> <Down>  pumvisible() ? "\<C-n>" : "\<Down>"
				inoremap <expr> <Up>    pumvisible() ? "\<C-p>" : "\<Up>"
				" Jump up and down the list
				inoremap <expr> <C-d>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
				inoremap <expr> <C-u>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"
			else
				" <C-k> Complete Snippet
				" <C-k> Jump to next snippet point
				imap <silent><expr><C-k> neosnippet#expandable() ?
							\ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
							\ "\<C-e>" : "\<Plug>(neosnippet_expand_or_jump)")
				smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

				inoremap <expr><C-g> neocomplete#undo_completion()
				inoremap <expr><C-l> neocomplete#complete_common_string()
				"inoremap <expr><CR> neocomplete#complete_common_string()

				" <CR>: close popup
				" <s-CR>: close popup and save indent.
				inoremap <expr><s-CR> pumvisible() ? neocomplete#smart_close_popup()."\<CR>" : "\<CR>"

				function! CleverCr()
					if pumvisible()
						if neosnippet#expandable()
							let exp = "\<Plug>(neosnippet_expand)"
							return exp . neocomplete#smart_close_popup()
						else
							return neocomplete#smart_close_popup()
						endif
					else
						return "\<CR>"
					endif
				endfunction

				" <CR> close popup and save indent or expand snippet
				imap <expr> <CR> CleverCr()
				" <C-h>, <BS>: close popup and delete backword char.
				inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
				inoremap <expr><C-y> neocomplete#smart_close_popup()
			endif
			" <TAB>: completion.
			inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
			inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

			" Courtesy of Matteo Cavalleri

			function! CleverTab()
				if pumvisible()
					return "\<C-n>"
				endif
				let substr = strpart(getline('.'), 0, col('.') - 1)
				let substr = matchstr(substr, '[^ \t]*$')
				if strlen(substr) == 0
					" nothing to match on empty string
					return "\<Tab>"
				else
					" existing text matching
					if neosnippet#expandable_or_jumpable()
						return "\<Plug>(neosnippet_expand_or_jump)"
					else
						return neocomplete#start_manual_complete()
					endif
				endif
			endfunction

			imap <expr> <Tab> CleverTab()
		" }

		" Enable heavy omni completion.
		if !exists('g:neocomplete#sources#omni#input_patterns')
			let g:neocomplete#sources#omni#input_patterns = {}
		endif
		let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
		let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
		let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
		let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
		let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
" }
" neocomplcache {
	elseif count(g:vimde_bundle_groups, 'neocomplcache')
		let g:acp_enableAtStartup = 0
		let g:neocomplcache_enable_at_startup = 1
		let g:neocomplcache_enable_camel_case_completion = 1
		let g:neocomplcache_enable_smart_case = 1
		let g:neocomplcache_enable_underbar_completion = 1
		let g:neocomplcache_enable_auto_delimiter = 1
		let g:neocomplcache_max_list = 15
		let g:neocomplcache_force_overwrite_completefunc = 1

		" Define dictionary.
		let g:neocomplcache_dictionary_filetype_lists = {
					\ 'default' : '',
					\ 'vimshell' : $HOME.'/.vimshell_hist',
					\ 'scheme' : $HOME.'/.gosh_completions'
					\ }

		" Define keyword.
		if !exists('g:neocomplcache_keyword_patterns')
			let g:neocomplcache_keyword_patterns = {}
		endif
		let g:neocomplcache_keyword_patterns._ = '\h\w*'

		" Plugin key-mappings {
			" These two lines conflict with the default digraph mapping of <C-K>
			imap <C-k> <Plug>(neosnippet_expand_or_jump)
			smap <C-k> <Plug>(neosnippet_expand_or_jump)
			if exists('g:vimde_noninvasive_completion')
				inoremap <CR> <CR>
				" <ESC> takes you out of insert mode
				inoremap <expr> <Esc>   pumvisible() ? "\<C-y>\<Esc>" : "\<Esc>"
				" <CR> accepts first, then sends the <CR>
				inoremap <expr> <CR>    pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
				" <Down> and <Up> cycle like <Tab> and <S-Tab>
				inoremap <expr> <Down>  pumvisible() ? "\<C-n>" : "\<Down>"
				inoremap <expr> <Up>    pumvisible() ? "\<C-p>" : "\<Up>"
				" Jump up and down the list
				inoremap <expr> <C-d>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
				inoremap <expr> <C-u>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"
			else
				imap <silent><expr><C-k> neosnippet#expandable() ?
							\ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
							\ "\<C-e>" : "\<Plug>(neosnippet_expand_or_jump)")
				smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

				inoremap <expr><C-g> neocomplcache#undo_completion()
				inoremap <expr><C-l> neocomplcache#complete_common_string()
				"inoremap <expr><CR> neocomplcache#complete_common_string()

				function! CleverCr()
					if pumvisible()
						if neosnippet#expandable()
							let exp = "\<Plug>(neosnippet_expand)"
							return exp . neocomplcache#close_popup()
						else
							return neocomplcache#close_popup()
						endif
					else
						return "\<CR>"
					endif
				endfunction

				" <CR> close popup and save indent or expand snippet
				imap <expr> <CR> CleverCr()

				" <CR>: close popup
				" <s-CR>: close popup and save indent.
				inoremap <expr><s-CR> pumvisible() ? neocomplcache#close_popup()."\<CR>" : "\<CR>"
				"inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "\<CR>"

				" <C-h>, <BS>: close popup and delete backword char.
				inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
				inoremap <expr><C-y> neocomplcache#close_popup()
			endif
			" <TAB>: completion.
			inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
			inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
		" }

		" Enable omni completion.
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
		autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
		autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

		" Enable heavy omni completion.
		if !exists('g:neocomplcache_omni_patterns')
			let g:neocomplcache_omni_patterns = {}
		endif
		let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
		let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
		let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
		let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
		let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
		let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'
" }
" Normal Vim omni-completion {
" To disable omni complete, add the following to your .vimrc.before.local file:
"   let g:vimde_no_omni_complete = 1
	elseif !exists('g:vimde_no_omni_complete')
		" Enable omni-completion.
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
		autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
		autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

	endif
" }
