# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
#

# https://github.com/miguelmartin75/ultisnips-snippets/blob/master/UltiSnips/cpp.snippets

# to overwrite vim-snippets priority -50
priority -51

extends c

# We want to overwrite everything in parent ft.
priority -50


################
# Pre-processor

snippet main "codeforces main with fast io" 
#define DEBUG

#include <bits/stdc++.h>
using namespace std;

#ifdef DEBUG
#define debug(...) cerr  << "(" << #__VA_ARGS__ << ") = (", debug_out(__VA_ARGS__)  // redirect stderr to stdout: std::cerr.rdbuf(std::cout.rdbuf());
#define debug_if(c, x...) if(c) debug(x)  // without {} around, debug(x) has to use comma expression, not ; expression
#define LOG(x...) cerr << __FILE__ << ":" << __LINE__ << " "; debug(x) // print file name, line number
#define ERROR(...) cerr << "\033[31m"; debug(__VA_ARGS__); cerr << "\033[0m";
#define INFO(...) cerr <<"\033[32m"; debug(__VA_ARGS__); cerr <<"\033[0m";"]]]]"
#else
#define debug(...)
#define debug_if(...)
#define LOG(...)
#define ERROR(...)
#define INFO(...)
#endif // DEBUG end debug print
/////////////////////  DEBUG option 2: overload stream operator

inline string to_string(const string &s) { return '"' + s + '"'; } // primitive types. Comma operator instead of ';'
inline string to_string(const char *s) { return to_string((string) s); }
inline string to_string(bool b) { return (b ? "true" : "false"); } // void __print(auto x) {cerr << x;}. compile error, ambiguous with overload for collection containers.
inline string to_string(char c) { return "'" + string(1, c) + "'"; }

template<typename T> string to_string(const T &x); // XXX: forward declaration, mutual recursive template function between __print(const T&x) and __print(const pair<> &x).
// pair, iterable collection containers: overloaded variadic functions:
template <size_t N>
string to_string(bitset<N> v) { string res = ""; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }
template<typename A, typename B>
string to_string(const pair<A, B> &x) {return "("+ to_string(x.first) + "," + to_string(x.second) + ")";}  // overload: std::pair
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) { return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")"; }
template<typename T>
string to_string(const T &v) {int f = 0; string res =  "{"; for (const auto &x: v) (res += (f++ ? "," : "") + to_string(x)); res += "}"; return res;} // XXX: overload: collection.


int main(int argc, char **argv) {
    std::ios_base::sync_with_stdio(false); // XXX: fast io in C++
    std::cin.tie(NULL);

    while(!cin.eof()) {
        int n;
        cin >> n;
        if (cin.eof()) break;
        vector<int> arr(n);
        for (int i = 0; i < n; ++i) {
            cin >> arr[i];
        }
		$code;
        cout << solve(arr, foe) << endl;
    }

    return 0;
}
endsnippet

snippet main "leetcode main"
int main(int argc, char **argv) {
    namespace fs = std::filesystem;

    if (argc > 1) {
        if (strcmp(argv[1], "-") == 0) { // read from stdin
            cerr << "Read test data from stdin..." << endl;
        } else {
            cerr << "Read test data from file " << argv[1] << endl;
            FR(argv[1]); // redirect file to stdin
        }
    } else { // read from default test data input file
        cerr << "Read test data from default test file..." << endl;
        fs::path wf(argv[0]);     // current path
        string test_in = wf.parent_path().parent_path().string() + "/test_cases/" + wf.filename().string() + ".in";
        debug(test_in);
        FR(test_in.c_str()); // redirect file to stdin, the default test data file
    }

    REGISTER_CONSTRUCTOR_SOLUTION;
    REGISTER_MEMBERFUNCTION_SOLUTION($method);
    while (true) {
        executor.constructSolution();
        executor.executeSolution();
    }

	// if testing an API class
    REGISTER_CONSTRUCTOR_CLASS($class, $cons);
    REGISTER_MEMBERFUNCTION_CLASS($class, $method);
    while (true) {
        executor.constructClass();
        while(executor) {
            executor.executeClass();
        }

    }
	// test API class

    cerr << "self test passed" << endl;

    return 0;
}
endsnippet

snippet ios "fast io " 
    ios_base::sync_with_stdio(false); // XXX: fast io in C++
    cin.tie(NULL);
endsnippet

snippet linc "#include local header (linc)"
#include "${1:`!p snip.rv = snip.basename + '.hpp'`}"
endsnippet

###############
# Keywords

snippet struct "c++ struct .. (struct)"
struct ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${2}

private:
	${0}
};
endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} 
{
public:
	${2}

private:
	${0}
};
endsnippet

snippet namespace "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet forr "for range loop"
for(auto ${2:x} : ${1:collection})
{
	${0:/* code */}
}
endsnippet

snippet {&,ref} "reference to object"
${0:T}&
endsnippet

##############
# STD lib

snippet range "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet {vec,vector} "std::vector (v)"
std::vector<${1:char}> ${0:name};
endsnippet

snippet template "template <typename ..> (template)"
template <typename ${0:T}>
endsnippet


# vim:ft=snippets:
